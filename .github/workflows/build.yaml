name: SonarQube Cloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=POSTECH-SOAT-SALA11_application-avalanches-producao-ms -Dsonar.projectName=application-avalanches-producao-ms

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 307946636040.dkr.ecr.sa-east-1.amazonaws.com

      - name: Build the Docker image for ms-producao
        run: |
          docker build -t 307946636040.dkr.ecr.sa-east-1.amazonaws.com/ms-producao:latest -f Dockerfile .

      - name: Push the Docker image for ms-producao to ECR
        run: |
          docker push 307946636040.dkr.ecr.sa-east-1.amazonaws.com/ms-producao:latest

      - name: Configure Kubernetes credentials (kubectl)
        run: |
          aws eks update-kubeconfig --region sa-east-1 --name techchallenge
      
      - name: Retrieve Secrets from AWS Secrets Manager and create Kubernetes secret
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-id producao-dbcredentials --region sa-east-1 --query SecretString --output text)

          # Parse o JSON dos segredos
          db_host=$(echo $secret | jq -r '.db_host')
          db_name=$(echo $secret | jq -r '.db_name')
          db_password=$(echo $secret | jq -r '.db_password')
          db_port=$(echo $secret | jq -r '.db_port')
          db_user=$(echo $secret | jq -r '.db_user')

          # Criar o secret no Kubernetes
          kubectl delete secret producao-dbcredentials || true  # Para evitar erro caso j√° exista
          kubectl create secret generic producao-dbcredentials \
            --from-literal=db_host=$db_host \
            --from-literal=db_name=$db_name \
            --from-literal=db_password=$db_password \
            --from-literal=db_port=$db_port \
            --from-literal=db_user=$db_user 

      - name: Deploy Sistema Pagamento Mock to EKS
        run: |
          kubectl apply -f kubernetes/producao-deployment.yaml
          kubectl apply -f kubernetes/producao-service.yaml
          kubectl apply -f kubernetes/producao-hpa.yaml

